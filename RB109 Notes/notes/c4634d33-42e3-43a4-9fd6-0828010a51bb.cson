createdAt: "2019-04-09T17:16:39.443Z"
updatedAt: "2019-04-16T15:23:06.348Z"
type: "MARKDOWN_NOTE"
folder: "3a6699afa20b7b226f08"
title: "Method Invocation"
tags: [
  "RB109_Assessment_Notes"
]
content: '''
  ### Method Invocation
  Method invocation happens when we call a method. A method can either be self-defined within the program or it can be one of *Ruby's* many built-in methods, like `puts`, `each`, or `select`, to name a few.
  
  **Example**: On line 5, we invoke the method `puts` and pass in the argument `"Hello String"` to it. 
  
  `Line 5: puts 'Hello String'`
  
  ### Method Definition
  Method definition happens when we define our own method within the code using the `def` keyword.
  
  **Example**: On line 1 we define the method `a_method` and pass in the parameter `str` with it.
  
  `Line 1: def a_method(str)`
  
  ### Mutating the Caller
  
  I always think of nuclear mutants when I hear this phrase. It's easy to understand this concept but harder to predict its implementation in the code. Mutating the caller means that you permanently alter the argument passed into the method. Often, you will see a `!` associated with mutating the caller; however, there are some methods, like `delete` that do not have the `bang`suffix and still mutate the caller.
  
  **Example**: 
  
  `def upcase_str(str)`
  `str.upcase!`
  `end`
  
  On line 21 we define the method `upcase_str` and pass in the parameter `str`. On line 22, we invoke the method `upcase!` on the parameter `str`, thereby mutating its caller (the local variable passed in as the argument).
  
  ### For Loop
  
  The `for` loop functions similarly to the `each` iterator. It allows you to iterate through a collection without specifying a `do..end` block.
  
  **Example**: 
  
  `for item in (1..5)`
  `puts item + 1`
  `end`
  
  On line 33, we invoke the method `for` on the argument `1..5` and pass in the parameter `item` to the block. On line 34 we invoke the method `puts` on the parameter `item` and print the parameter + `1`. This will output on separate  lines: 
  
  `=> 2, 3, 4, 5, 6`
  
  This type of loop does not mutate the caller unless the `block` calls for some kind of mutating method, like `<<` or `slice!`.
  
  ### Transformation
  Transformation is the act of modifying every element within the collection.
  
  An example would be: increment every element in the array by 1.
  
  Another example would be to append 's' to the end of every string element in an array.
  
  The four essentials of any loop are:
  1. A loop
  2. A counter
  3. A way to exit the loop
  4. A way to retrieve the current value
  
  Transformation and Selection both require criteria. The criteria for transformation determines *how* to perform the criteria; whereas, selection's criteria determines *which* elements get selected.
  
  You can transform a new or separate array while looping or iterating through a different one. I do this a lot, where I'll append elements from the array being iterated through onto an empty array initialized a few lines above.
  
  ### Selection
  Selection is the act of picking certain elements out of a collection based on a set of criteria.
  
  An example would be: select only elements that are odd.
  
  Another example would be to sleect only the elements that are strings.
  
  The four essentials of any loop are:
  1. A loop
  2. A counter
  3. A way to retrieve the current value
  4. A way to exit the loop
  
  In this code: 
  
  `  
  if current_char == 'g'
  selected_chars << current_char   
  end`
  
  The *selection criteria* is the `if conditional`. It determines what is and isn't selected.
  
  Important: Any time you use selection or transformation, you return in some way a new collection.
  
  ### Each
  `each` is essentially the same thing as a `loop`. One difference is that it is a simpler way to iterate over a collection. The bigger difference is that `each` simply returns the collection it was called on without modification.
  
  ### Select
  `select` selects elements and returns a new collection by evaluating the return value of the block. Any element that evaluates to true will be returned in the new collection. The last expression in the block is the return value to the `select` method.
  
  ### Map
  `map` is similar to `select` in that it evaluates the return value of its block for returning an array. If there is a `conditional` as the last line in the block passed to a `map`invocation, the return value to the invocation will be a `boolean` and will be returned as an element in the new array. So, the difference between `select` and `map` is that `map` uses the return value of the block to perform transformation, not selection.
  
  ### Each With Object
  `each_with_object` is similar to `each` but it passes an extra parameter `object` and also an argument `[] or {}` to the method. The argument collection is the return value of the method.
  
  To modify the object, all you need to do is specify some transformation criteria for the second parameter.
  
  ### Partition
  `partition` is really cool. You can do parallel assignment to create two separate arrays based on some criteria. False goes in the second variable, true goes in the first variable.
  
  ### Pass by Value
  Pass by value means simply copying the original object. This means that the original object cannot be mutated. An example of this would be numbers, since numbers are immutable in Ruby.
  
  ### Pass by Reference
  Pass by reference means that a reference to an object is passed into the method. Strings, arrays, and hashes work under this means, mostly. When it is pass by reference, the object can be mutated but it doesn't necessarily have to be mutated.
  
  ### Ruby is Pass by....
  Ruby is pass by reference value.
  
  By this, I mean that in some situations, depending on the mutability of the object being passed, ruby passes by value or by reference. 
  
  In the case of a number and boolean, ruby is always pass by value. Numbers are immutable. In the case of strings, arrays, and hashes, ruby is pass by reference with the option of mutability depending on which type of method (destructive or non-destructive) is invoked on the object.
  
  ### Receiver?
  The receiver of a method call is the object that the method is invoked on.
  
  Here's an example:
  
  `[1, 2, 3].each`
  
  `[1, 2, 3]` is the receiver.
  
  ### Sort
  The `sort` method works by using the comparison `<=>` operator to compare two parameters `a and b`. Based on the calculation, one element will be placed first, and the other one second.
  
  When the comparison between `a <=> b` results in value of `1`, `b` will follow `a` in the return array. When there is a `-1`, `b` will preceed `a`. A `0` indicates that both values are equal.
  
  By default, the invocation of the `sort` method results in the receiver being ordered in ascending value. If one wants to use descending order, a block may be passed alongside the method invocation, wherein the line `b <=> a` can be used to force the values into descending order.
  
  Using the optional code block, one can also sort by using other methods. For instance, one could sort by passing the method invocation `length` to the method invocation `sort_by`. 
  
  `strings.sort_by(&:length)`
  
  ### Range
  This is something I NEED TO REMEMBER. Ingrain this in your BRAIN, JORDAN.
  
  A range represents a set of value, defined by a beginning value and ending value. This is also known as an **interval**.
  
  Here's an example:
  
  `(1..4).to_a` => `[1, 2, 3, 4]`
  `(1...4).to_a => [1, 2, 3]`
  `('a'..'d').to_a => [a, b, c, d]`
  
  This is INFINITELY faster than that crap method you've been using with the `each` method. Enter into PRO territory and use the `range` method invocation to create the arrays you need. This WILL be useful on the exam. GUARANTEED.
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
